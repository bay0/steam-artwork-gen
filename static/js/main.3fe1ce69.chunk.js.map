{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","setName","fontSize","setFontSize","paddingTopText","setPaddingTopText","paddingBottomText","setPaddingBottomText","paddingLeftText","setPaddingLeftText","paddingRightText","setPaddingRightText","a","b","g","r","colorGradient1","setColorGradient1","colorGradient2","setColorGradient2","slider1","setSlider1","mixBlendModeGradient","setMixBlendModeGradient","mixBlendModeText","setMixBlendModeText","alignItems","setAlignItems","gradientSet","setGradientSet","animationSpeed","setAnimationSpeed","mixBlendModeModes","value","positionOptions","gradientForm","classes","makeStyles","theme","root","flexGrow","flexWrap","margin","spacing","width","height","letterSpacing","backgroundSize","textShadow","animatedTextWrapper","display","justifyContent","background","position","animatedText","color","fontWeight","fontFamily","paddingTop","paddingBottom","paddingLeft","paddingRight","animation","content","mixBlendMode","filter","animatedTextNeonWrapper","overflow","animatedTextGradient","top","left","to","transform","animatedTextDodge","right","bottom","sliderWrapper","formControl","minWidth","useStyles","Fragment","Grid","container","item","Paper","square","elevation","className","id","direction","Typography","TextField","label","variant","onChange","event","target","input","FormControl","InputLabel","htmlFor","Select","native","inputProps","onChangeComplete","rgb","xs","gutterBottom","Slider","aria-labelledby","valueLabelDisplay","step","min","max","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3fe1ce69.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Typography, TextField, Paper, Slider, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nfunction App() {\r\n  const [name, setName] = useState(\"bay\");\r\n  const [fontSize, setFontSize] = useState(100);\r\n  const [paddingTopText, setPaddingTopText] = useState(0);\r\n  const [paddingBottomText, setPaddingBottomText] = useState(0);\r\n  const [paddingLeftText, setPaddingLeftText] = useState(0);\r\n  const [paddingRightText, setPaddingRightText] = useState(0);\r\n  const [colorGradient1, setColorGradient1] = useState({a: 1, b: 161, g: 36, r: 153});\r\n  const [colorGradient2, setColorGradient2] = useState({a: 1, b: 214, g: 81, r: 4});\r\n  const [slider1, setSlider1] = useState(114);\r\n  const [mixBlendModeGradient, setMixBlendModeGradient] = useState(\"multiply\"); \r\n  const [mixBlendModeText, setMixBlendModeText] = useState(\"difference\"); \r\n  const [alignItems, setAlignItems] = useState(\"center\"); \r\n  const [gradientSet, setGradientSet] = useState(\"circle\");\r\n  const [animationSpeed, setAnimationSpeed] = useState(3);\r\n\r\n  const mixBlendModeModes = [\r\n    <option value='normal'>normal</option>,\r\n    <option value='multiply'>multiply</option>,\r\n    <option value='screen'>screen</option>,\r\n    <option value='darken'>darken</option>,\r\n    <option value='lighten'>lighten</option>,\r\n    <option value='color-dodge'>color-dodge</option>,\r\n    <option value='color-burn'>color-burn</option>,\r\n    <option value='hard-light'>hard-light</option>,\r\n    <option value='soft-light'>soft-light</option>,\r\n    <option value='difference'>difference</option>,\r\n    <option value='exclusion'>exclusion</option>,\r\n    <option value='hue'>hue</option>,\r\n    <option value='saturation'>saturation</option>,\r\n    <option value='color'>color</option>,\r\n    <option value='luminosity'>luminosity</option>,\r\n    <option value='initial'>initial</option>,\r\n    <option value='inherit'>inherit</option>,\r\n    <option value='unset'>unset</option>,\r\n  ]\r\n\r\n  const positionOptions = [\r\n    <option value='flex-start'>flex-start</option>,\r\n    <option value='flex-end'>flex-end</option>,\r\n    <option value='center'>center</option>,\r\n    <option value='baseline'>baseline</option>,\r\n    <option value='stretch'>stretch</option>,\r\n    <option value='inherit'>inherit</option>,\r\n    <option value='initial'>initial</option>,\r\n    <option value='unset'>unset</option>,\r\n  ]\r\n\r\n  const gradientForm = [\r\n    <option value=\"ellipse\">ellipse</option>,\r\n    <option value=\"circle\">circle</option>,\r\n  ]\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    flexWrap: 'wrap',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(16),\r\n        height: theme.spacing(16),\r\n    },\r\n    '@keyframes reveal': {\r\n      '80%': {\r\n        letterSpacing: '8px'\r\n      },\r\n      '100%': {\r\n        backgroundSize: '300% 300%'\r\n      }\r\n    },\r\n    '@keyframes glow': {\r\n      '40%': {\r\n        textShadow: '0 0 8px #fff'\r\n      }\r\n    },\r\n    animatedTextWrapper: {\r\n      display: 'flex',\r\n      alignItems: alignItems,\r\n      justifyContent: 'center',\r\n      background: '#000000',\r\n      height: '808px',\r\n      width: '506px',\r\n      position: 'static'\r\n    },\r\n    animatedText: {\r\n      color: '#ffffff',\r\n      background: '#000000',\r\n      fontSize: `${fontSize}px`,\r\n      fontWeight: 'italic',\r\n      fontFamily: 'SF Pro Display',\r\n      position: 'relative',\r\n      paddingTop: `${paddingTopText}px`,\r\n      paddingBottom: `${paddingBottomText}px`,\r\n      paddingLeft: `${paddingLeftText}px`,\r\n      paddingRight: `${paddingRightText}px`,\r\n      animation: `$glow ${animationSpeed}s linear infinite`,\r\n      '&::before': {\r\n        content: `\"${name}\"`,\r\n        position: 'absolute',\r\n        mixBlendMode: mixBlendModeText,\r\n        filter: 'blur(3px)',\r\n      }\r\n    },\r\n    animatedTextNeonWrapper: {\r\n      display: 'inline-flex',\r\n      filter: 'brightness(200%)',\r\n      overflow: 'hidden',\r\n    },\r\n    animatedTextGradient: {\r\n      background: `linear-gradient(${slider1}deg, rgba(${colorGradient1.r}, ${colorGradient1.g}, ${colorGradient1.b}, ${colorGradient1.a}) 4.927083333333334%,rgba(${colorGradient2.r}, ${colorGradient2.g}, ${colorGradient2.b}, ${colorGradient2.a}) 97.84374999999999%)`,\r\n      position: 'absolute',\r\n      top: 0,\r\n      left:0,\r\n      width: '100%',\r\n      height: '100%',\r\n      mixBlendMode: mixBlendModeGradient\r\n    },\r\n    '@keyframes dodge-area': {\r\n      to: {\r\n          transform: 'translate(50%,50%)'\r\n      }\r\n    },\r\n    animatedTextDodge: {\r\n      background: 'radial-gradient(circle ,white,black 35%) center / 25% 25%',\r\n      position: 'absolute',\r\n      top: '-100%',\r\n      left: '-100%',\r\n      right:0,\r\n      bottom:0,\r\n      mixBlendMode: 'color-dodge',\r\n      animation: `$dodge-area ${animationSpeed}s linear infinite`\r\n    },\r\n    sliderWrapper: {\r\n      width: 300\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const handleNameChange = event => setName(event.target.value)\r\n  const handleFontSize = event => setFontSize(event.target.value)\r\n  const handleGradientColorChangeA = (color) => setColorGradient1(color.rgb)\r\n  const handleGradientColorChangeB = (color) => setColorGradient2(color.rgb)\r\n  const handleSlider1Change = (event, value) => setSlider1(value)\r\n  const handleGradientBlendModeChange = event => setMixBlendModeGradient(event.target.value)\r\n  const handleTextBlendModeChange = event => setMixBlendModeText(event.target.value)\r\n  const handleAlignItems = event => setAlignItems(event.target.value)\r\n  const handlePaddingTopText = event => setPaddingTopText(event.target.value)\r\n  const handlePaddingBottomText = event => setPaddingBottomText(event.target.value)\r\n  const handlePaddingLeftText = event => setPaddingLeftText(event.target.value)\r\n  const handlePaddingRightText = event => setPaddingRightText(event.target.value)\r\n  const handleGradientForm = event => setGradientSet(event.target.value)\r\n  const handleAnimationSpeed = event => setAnimationSpeed(event.target.value)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          <Paper square elevation={3}>\r\n            <div className={classes.animatedTextWrapper}>\r\n              <div className={classes.animatedTextNeonWrapper}>\r\n                  <span id=\"nameFitty\" className={classes.animatedText} >{name}</span>\r\n                  <span className={classes.animatedTextGradient}></span>\r\n                  <span className={classes.animatedTextDodge}></span>\r\n              </div>\r\n            </div>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container direction=\"column\" spacing={2}>\r\n            <Grid item><Typography>Text options</Typography></Grid>\r\n            <Grid item container spacing={2}>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" label=\"Name\" variant=\"outlined\" value={name} onChange={handleNameChange} />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" input=\"number\" label=\"Font Size\" variant=\"outlined\" value={fontSize} onChange={handleFontSize} />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"gg3-native-simple\">Text mix blend mode</InputLabel>\r\n                  <Select\r\n                    native\r\n                    value={mixBlendModeText}\r\n                    onChange={handleTextBlendModeChange}\r\n                    inputProps={{\r\n                      name: 'mixBlendModeText',\r\n                      id: 'mixBlendModeText',\r\n                    }}\r\n                  >\r\n                    {mixBlendModeModes}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item><Typography>Text Position</Typography></Grid>\r\n            <Grid item container spacing={2}>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" input=\"number\" label=\"Padding Top\" variant=\"outlined\" value={paddingTopText} onChange={handlePaddingTopText} />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" input=\"number\" label=\"Padding Bottom\" variant=\"outlined\" value={paddingBottomText} onChange={handlePaddingBottomText} />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" input=\"number\" label=\"Padding Left\" variant=\"outlined\" value={paddingLeftText} onChange={handlePaddingLeftText} />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField id=\"outlined-name\" input=\"number\" label=\"Padding Right\" variant=\"outlined\" value={paddingRightText} onChange={handlePaddingRightText} />\r\n              </Grid>\r\n            </Grid>\r\n              <Grid item>\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"gg3-native-simple\">Text alignItems</InputLabel>\r\n                  <Select\r\n                    native\r\n                    value={alignItems}\r\n                    onChange={handleAlignItems}\r\n                    inputProps={{\r\n                      name: 'alignItems',\r\n                      id: 'alignItems',\r\n                    }}\r\n                  >\r\n                    {positionOptions}\r\n                  </Select>\r\n                </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container direction=\"column\" spacing={2}>\r\n            <Grid item><Typography>Gradient</Typography></Grid>\r\n            <Grid item container spacing={2}>\r\n              <Grid item>\r\n                <SketchPicker\r\n                  color={colorGradient1}\r\n                  id=\"colorGradient1\"\r\n                  onChangeComplete={handleGradientColorChangeA}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <SketchPicker\r\n                  color={colorGradient2}\r\n                  id=\"colorGradient2\"\r\n                  onChangeComplete={handleGradientColorChangeB}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container direction=\"column\" spacing={2}>\r\n                  <Grid item xs>\r\n                    <div className={classes.sliderWrapper}>\r\n                      <Typography id=\"discrete-slider\" gutterBottom>\r\n                        {slider1}°\r\n                      </Typography>\r\n                      <Slider\r\n                        value={slider1}\r\n                        onChange={handleSlider1Change}\r\n                        aria-labelledby=\"discrete-slider\"\r\n                        valueLabelDisplay=\"auto\"\r\n                        step={1}\r\n                        min={0}\r\n                        max={360}\r\n                      />\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"gg3-native-simple\">Gradient mix blend mode</InputLabel>\r\n                  <Select\r\n                    native\r\n                    value={mixBlendModeGradient}\r\n                    onChange={handleGradientBlendModeChange}\r\n                    inputProps={{\r\n                      name: 'mixBlendModeGradient',\r\n                      id: 'mixBlendModeGradient',\r\n                    }}\r\n                  >\r\n                    {mixBlendModeModes}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"gg3-native-simple\">Linear Gradient Set</InputLabel>\r\n                  <Select\r\n                    native\r\n                    value={gradientSet}\r\n                    onChange={handleGradientForm}\r\n                    inputProps={{\r\n                      name: 'gradientSet',\r\n                      id: 'gradientSet',\r\n                    }}\r\n                  >\r\n                    {gradientForm}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n                <TextField id=\"outlined-name\" input=\"number\" label=\"Animation speed\" variant=\"outlined\" value={animationSpeed} onChange={handleAnimationSpeed} />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}